@inherits ComponentBase
@inject InstituutService instituutService

<div class="modal" tabindex="-1" style="display: @(IsVisible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close btn btn-danger" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if(instutuut != null && NewInstuut == false)
                {
                    <label>Name</label>
                    <input type="text" @bind="instutuut.Name" @bind:after="Update" />

                }
                else
                {
                    <label>Name</label>
                    <input type="text" @bind="NewName"/>
                    <button class="btn btn-primary" @onclick="AddNewInstutuut">Add New instituut</button>
                }
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public Instutuut? instutuut{ get; set; }

    [Parameter]
    public bool NewInstuut{ get; set; }

    string? NewName;

    async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }

    void Update()
    {

        instituutService.UpdateInstutuutById(instutuut!);
    }
    void AddNewInstutuut()
    {

        var NewInstuut = new Instutuut { Name = NewName };
        instituutService.AddInstutuut(NewInstuut);
        NewName = "";
        CloseModal();
        StateHasChanged();

    }

}
